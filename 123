import ply.yacc as yacc
import ply.lex as lex

# list of tokens

tokens = [
        'VARIABLE',
        'AND',
        'OR',
        'IMPLICATION',
        'NEGATION',
        'LPAREN',
        'RPAREN'
]

t_VARIABLE = r'[a-z]'
t_AND    = r'\\/'
t_OR   = r'\\/'
t_IMPLICATION  = r'->'
t_NEGATION = r'~'
t_LPAREN  = r'\('
t_RPAREN  = r'\)'
t_ignore = ' \t'

# error definition

def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)

# lexer

lexer=lex.lex()

# input
print('Input your expression there:')
s = input()
expression = lexer.input(s)

# token list
while 1:
    tok = lex.token()
    if not tok: break   
    print(tok)

# parsing

def p_expression_conj(t):
    'expression : expression AND term'
    t[0] = t[1] \\/ t[3]
    
def p_expression_disj(t):
    'expression : expression OR term'
    t[0] = t[1] \\/ t[3]

def p_expression_term(t):
    'expression : term'
    t[0] = t[1]
    
def p_term_neg:
    'term : NEGATION term'
    t[0] = ~ t[2]
    
def p_term_factor:
    'term : factor'
    t[0] = t[1]
    
def p_factor_expr(t):
    'factor : LPAREN expression RPAREN'
    t[0] = t[2]
    
# Error rule for syntax errors
def p_error(t):
    print "Syntax error in input!"

# Build the parser
yacc.yacc()

while 1:
   try:
       s = raw_input('calc > ')
   except EOFError:
       break
   if not s: continue
   result = yacc.parse(s)
   print result





[DEBUG ON]
>>> 
[DEBUG OFF]
>>> 
